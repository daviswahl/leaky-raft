// let transport = await!(bincode_transport::connect(&addr))?;

// new_stub is generated by the service! macro. Like Server, it takes a config and any
// Transport as input, and returns a Client, also generated by the macro.
// by the service mcro.
// let mut client = await!(crate::rpc::new_stub(tarpc::client::Config::default(), transport))?;

// The client has an RPC method for each RPC defined in service!. It takes the same args
// as defined, with the addition of a Context, which is always the first arg. The Context
// specifies a deadline and trace information which can be helpful in debugging requests.
//let hello = await!(client.hello(tarpc::context::current(), "Stim".to_string()))?;

#[derive(Clone)]
pub struct Client {}
